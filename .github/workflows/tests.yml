name: Tests 14 sprint

on:
  push:
    branches:
      - '**'
    tags:
      - '**'
env:
  DIR_TESTS: /tmp/tests-back-to-the-film
  REP_TESTS: https://github.com/Yandex-Practicum/tests-back-to-the-film.git
jobs:
  test_backend:
    runs-on: ubuntu-latest
    steps:
    - name: Set up GitHub Actions
      uses: actions/checkout@v4
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    - name: Get testing lib
      run: set -eu && git clone --depth 1 $REP_TESTS $DIR_TESTS
    - name: Run tests
      run: bash $DIR_TESTS/bin/backend.sh
  test_endpoints:
    runs-on: ubuntu-latest
    steps:
    - name: Set up GitHub Actions
      uses: actions/checkout@v4
    - name: Use Node.js 18.x
      uses: actions/setup-node@v4
      with:
        node-version: 18.x
    - name: Get testing lib
      run: set -eu && git clone --depth 1 $REP_TESTS $DIR_TESTS
    - name: Start project
      run: bash $DIR_TESTS/bin/start_project.sh
    - name: Run tests
      run: bash $DIR_TESTS/bin/endpoints.sh
  build_and_push_to_docker_hub:
    name: Push Docker images to Docker GitHub
    runs-on: ubuntu-latest
    needs: test_endpoints
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub (backend)
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_LABEL }}/film_backend:latest
          context: backend/
      - name: Push to Docker Hub (frontend)
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: ${{ secrets.DOCKER_LABEL }}/film_frontend:latest
          context: frontend/
  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: ${{ secrets.SSH_KEY }}
          passphrase: ${{ secrets.PASSPHRASE }}
          script: |
            sudo docker pull ${{ secrets.DOCKER_LABEL }}/film_backend:latest
            sudo docker pull ${{ secrets.DOCKER_LABEL }}/film_frontend:latest
            sudo docker compose stop
            sudo docker compose rm backend
            sudo docker compose rm frontend
            rm .env
            touch .env
            echo DATABASE_URL=${{ secrets.DATABASE_URL }} >> .env
            echo DATABASE_DRIVER=${{ secrets.DATABASE_DRIVER }} >> .env
            echo DATABASE_HOST=${{ secrets.DATABASE_HOST }} >> .env
            echo DATABASE_PORT=${{ secrets.DATABASE_PORT }} >> .env
            echo DATABASE_NAME=${{ secrets.DATABASE_NAME }} >> .env
            echo DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }} >> .env
            echo DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }} >> .env
            echo PGADMIN_DEFAULT_EMAIL=${{ secrets.PGADMIN_DEFAULT_EMAIL }} >> .env
            echo PGADMIN_DEFAULT_PASSWORD=${{ secrets.PGADMIN_DEFAULT_PASSWORD }} >> .env
            echo LOGGER_TYPE=${{ secrets.LOGGER_TYPE }} >> .env
            echo VITE_API_URL=${{ secrets.VITE_API_URL }} >> .env
            echo VITE_CDN_URL=${{ secrets.VITE_CDN_URL }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            sudo docker compose up -d --build
            sudo docker compose exec -T npm run migrate:up
